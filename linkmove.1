.Dd October 30, 2019
.Dt LINKMOVE 1
.Os
.Sh NAME
.Nm linkmove
.Nd move files, leaving behind symlinks
.Sh SYNOPSIS
.Nm
.Op Fl v
.Ar source
.Ar ...
.Ar target
.Sh DESCRIPTION
Moves each
.Ar source
to
.Ar target ,
follwing
.Xr mv 1
semantics,
leaving behind symlinks at the
.Ar source
locations pointing to the new locations.
.Pp
The moves are attempted using
.Xr rename 2 .
If that fails, the files or directories are recursively copied
and then deleted,
making a best-effort attempt to preserve metadata.
.Pp
If
.Fl v
is given,
touched paths in
.Ar target
are output to standard error.
.Sh RATIONALE
.Nm
was created to move files in a website without breaking links.
.Pp
Manually invoking
.Xr mv 1
and
.Xr ln 1
in sequence works well for smaller number of items
but it's tricky for a generic script to determine the proper link target
since the
.Xr mv 1
.Ar target
argument may refer to either the full path or a parent directy.
.Sh EXIT STATUS
Zero on success, non-zero if an error occured.
.Sh EXAMPLES
Rename and symlink
.Li old.txt
to
.Li new.txt
and verify the results:
.Bd -literal -offset indent
$ linkmove old.txt new.txt

$ file -h old.txt new.txt
old.txt: symbolic link to new.txt
new.txt: ASCII text
.Ed
.Pp
Link-move multipe items with verbose output:
.Bd -literal -offset indent
$ linkmove foo bar /nfs
/nfs/foo
/nfs/foo/a
/nfs/foo/b
/nfs/bar
.Ed
.Pp
Here, the move was across filesystem boundaries so the
.Li foo
directory was copied recursively.
.Sh SEE ALSO
.Xr ln 1 ,
.Xr mv 1
.Sh AUTHORS
.An Sijmen J. Mulder
.Aq Mt ik@sjmulder.nl
.Sh BUGS
Exits on any error, rather than continuing with the next file.
